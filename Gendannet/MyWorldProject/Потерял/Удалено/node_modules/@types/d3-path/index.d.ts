// Last module patch version validated against: 3.1.0

/**
 * A D3 path serializer implementing CanvasPathMethods
 */
export interface Path {
    /**
     * Move to the specified point ⟨x, y⟩. Equivalent to context.moveTo and SVG’s “moveto” command.
     *
     * @param x x-Coordinate of point to move to
     * @param y y-Coordinate of point to move to
     */
    moveTo(x: number, y: number): void;

    /**
     * Ends the current subpath and causes an automatic straight line to be drawn from the current point to the initial point of the current subpath.
     * Equivalent to context.closePath and SVG’s “closepath” command.
     */
    closePath(): void;

    /**
     * Draws a straight line from the current point to the specified point ⟨x, y⟩.
     * Equivalent to context.lineTo and SVG’s “lineto” command.
     *
     * @param x x-Coordinate of point to draw the line to
     * @param y y-Coordinate of point to draw the line to
     */
    lineTo(x: number, y: number): void;

    /**
     * Draws a quadratic Bézier segment from the current point to the specified point ⟨x, y⟩, with the specified control point ⟨cpx, cpy⟩.
     * Equivalent to context.quadraticCurveTo and SVG’s quadratic Bézier curve commands.
     *
     * @param cpx x-Coordinate of the control point for the quadratic Bézier curve
     * @param cpy y-Coordinate of the control point for the quadratic Bézier curve
     * @param x x-Coordinate of point to draw the curve to
     * @param y y-Coordinate of point to draw the curve to
     */
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;

    /**
     * Draws a cubic Bézier segment from the current point to the specified point ⟨x, y⟩, with the specified control points ⟨cpx1, cpy1⟩ and ⟨cpx2, cpy2⟩.
     * Equivalent to context.bezierCurveTo and SVG’s cubic Bézier curve commands.
     *
     * @param cpx1 x-Coordinate of the first control point for the Bézier curve
     * @param cpy1 y-Coordinate of the first control point for the Bézier curve
     * @param cpx2 x-Coordinate of the second control point for the Bézier curve
     * @param cpy2 y-Coordinate of the second control point for the Bézier curve
     * @param x x-Coordinate of point to draw the curve to
     * @param y y-Coordinate of point to draw the curve to
     */
    bezierCurveTo(cpx1: number, cpy1: number, cpx2: number, cpy2: number, x: number, y: number): void;

    /**
     * Draws a circular arc segment with the specified radius that starts tangent to the line between the current point and the specified point ⟨x1, y1⟩
     * and ends tangent to the line between the specified points ⟨x1, y1⟩ and ⟨x2, y2⟩. If the first tangent point is not equal to the current point,
     * a straight line is drawn between the current point and the first tangent point. Equivalent to context.arcTo and uses SVG’s elliptical arc curve commands.
     *
     * @param x1 x-Coordinate of the first tangent point
     * @param y1 y-Coordinate of the first tangent point
     * @param x2 x-Coordinate of the second tangent point
     * @param y2 y-Coordinate of the second tangent point
     * @param r  Radius of the arc segment
     */
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;

    /**
     * Draws a circular arc segment with the specified center ⟨x, y⟩, radius, startAngle and endAngle. If anticlockwise is true,
     * the arc is drawn in the anticlockwise direction; otherwise, it is drawn in the clockwise direction.
     * If the current point is not equal to the starting point of the arc, a straight line is drawn from the current point to the start of the arc.
     * Equivalent to context.arc and uses SVG’s elliptical arc curve commands.
     *
     * @param x x-Coordinate of the center point of the arc segment
     * @param y y-Coordinate of the center point of the arc segment
     * @param startAngle Start angle of arc segment
     * @param endAngle End angle of arc segment
     * @param anticlockwise Flag indicating direction{"name":"@types/d3-shape","dist-tags":{"ts2.0":"1.2.5","ts2.1":"1.2.5","ts2.2":"1.2.5","ts2.3":"1.3.2","ts2.4":"1.3.2","ts2.5":"1.3.2","ts2.6":"1.3.2","ts2.7":"1.3.2","ts2.8":"1.3.2","ts2.9":"1.3.2","ts3.0":"1.3.2","ts3.1":"1.3.2","ts3.2":"2.0.0","ts3.3":"2.0.0","ts3.4":"2.0.0","ts3.5":"2.1.0","ts3.6":"3.0.2","ts3.7":"3.0.2","ts3.8":"3.0.2","ts3.9":"3.1.0","ts4.0":"3.1.0","ts4.1":"3.1.0","ts4.2":"3.1.1","ts4.3":"3.1.2","ts4.4":"3.1.2","ts5.6":"3.1.6","latest":"3.1.6","ts4.5":"3.1.6","ts4.6":"3.1.6","ts4.7":"3.1.6","ts4.8":"3.1.6","ts4.9":"3.1.6","ts5.0":"3.1.6","ts5.1":"3.1.6","ts5.2":"3.1.6","ts5.3":"3.1.6","ts5.4":"3.1.6","ts5.5":"3.1.6","ts5.7":"3.1.6"},"versions":{"0.0.1":{"name":"@types/d3-shape","version":"0.0.1","dist":{"shasum":"e6c29c7020e960d5689544009802c2c7f8a37984","tarball":"https://registry.npmjs.org/@types/d3-shape/-/d3-shape-0.0.1.tgz","integrity":"sha512-sZH4X/kEPxW9JTqAm57xznQyDSju8s3vaeBdnFNRzVUHKtcMmv2Lrn+gIDvzPZ1NiUnC4W9pRFe/eiEzP9wq0w==","signatures":[{"sig":"MEUCIQD3oo1NHv7xSuyVn1LgmzshQ6+r/xDtah2ynsxAeb6F2AIgXSjaQCypMD3Khcu2rIeGCAiMRTfooHgAPkujKWBMzVs=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]}},"0.0.2":{"name":"@types/d3-shape","ver