import type { SubscriptionOptions } from '@internal/query/core/apiState'
import type { SubscriptionSelectors } from '@internal/query/core/buildMiddleware/types'
import { server } from '@internal/query/tests/mocks/server'
import { countObjectKeys } from '@internal/query/utils/countObjectKeys'
import {
  actionsReducer,
  setupApiStore,
  useRenderCounter,
  waitMs,
  withProvider,
} from '@internal/tests/utils/helpers'
import type { UnknownAction } from '@reduxjs/toolkit'
import {
  configureStore,
  createListenerMiddleware,
  createSlice,
} from '@reduxjs/toolkit'
import {
  QueryStatus,
  createApi,
  fetchBaseQuery,
  skipToken,
} from '@reduxjs/toolkit/query/react'
import {
  act,
  fireEvent,
  render,
  renderHook,
  screen,
  waitFor,
} from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import { HttpResponse, http } from 'msw'
import { useEffect, useState } from 'react'
import type { MockInstance } from 'vitest'

// Just setup a temporary in-memory counter for tests that `getIncrementedAmount`.
// This can be used to test how many renders happen due to data changes or
// the refetching behavior of components.
let amount = 0
let nextItemId = 0

interface Item {
  id: number
}

const api = createApi({
  baseQuery: async (arg: any) => {
    await waitMs(150)
    if (arg?.body && 'amount' in arg.body) {
      amount += 1
    }

    if (arg?.body && 'forceError' in arg.body) {
      return {
        error: {
          status: 500,
          data: null,
        },
      }
    }

    if (arg?.body && 'listItems' in arg.body) {
      const items: Item[] = []
      for (let i = 0; i < 3; i++) {
        const item = { id: nextItemId++ }
        items.push(item)
      }
      return { data: items }
    }

    return {
      data: arg?.body ? { ...arg.body, ...(amount ? { amount } : {}) } : {},
    }
  },
  endpoints: (build) => ({
    getUser: build.query<{ name: string }, number>({
      query: () => ({
        body: { name: 'Timmy' },
      }),
    }),
    getUserAndForceError: build.query<{ name: string }, number>({
      query: () => ({
        body: {
          forceError: true,
        },
      }),
    }),
    getIncrementedAmount: build.query<{ amount: number }, void>({
      query: () => ({
        url: '',
        body: {
          amount,
        },
      }),
    }),
    updateUser: build.mutation<{ name: string }, { name: string }>({
      query: (update) => ({ body: update }),
    }),
    getError: build.query({
      query: () => '/error',
    }),
    listItems: build.query<Item[], { pageNumber: number | bigint }>({
      serializeQueryArgs: ({ endpointName }) => {
        return endpointName
      },
      query: ({ pageNumber }) => ({
        url: `items?limit=1&offset=${pageNumber}`,
        body: {
          listItems: true,
        },
      }),
      merge: (currentCache, newItems) => {
        currentCache.push(...newItems)
      },
      forceRefetch: () => {
        return true
      },
    }),
  }),
})

const listenerMiddleware = createListenerMiddleware()

let actions: UnknownAction[] = []

const storeRef = setupApiStore(
  api,
  {},
  {
    middleware: {
      prepend: [listenerMiddleware.middleware],
    },
  },
)

let getSubscriptions: SubscriptionSelectors['getSubscriptions']
let getSubscriptionCount: SubscriptionSelectors['getSubscriptionCount']

beforeEach(() => {
  actions = []
  listenerMiddleware.startListening({
    predicate: () => true,
    effect: (action) => {
      actions.push(action)
    },
  })
  ;({ getSubscriptions, getSubscriptionCount } = storeRef.store.dispatch(
    api.internalActions.internal_getRTKQSubscriptions(),
  ) as unknown as SubscriptionSelectors)
})

afterEach(() => {
  nextItemId = 0
  amount = 0
  listenerMiddleware.clearListeners()
})

let getRenderCount: () => number = () => 0

describe('hooks tests', () => {
  describe('useQuery', () => {
    test('useQuery hook basic render count assumptions', async () => {
      function User() {
        const { isFetching } = api.endpoints.getUser.useQuery(1)
        getRenderCount = useRenderCounter()

        return (
          <div>
            <div data-testid="isFetching">{String(isFetching)}</div>
          </div>
        )
      }

      render(<User />, { wrapper: storeRef.wrapper })
      // By the time this runs, the initial render will happen, and the query
      //  will start immediately running by the time we can expect this
      expect(getRenderCount()).toBe(2)

      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )
      expect(getRenderCount()).toBe(3)
    })

    test('useQuery hook sets isFetching=true whenever a request is in flight', async () => {
      function User() {
        const [value, setValue] = useState(0)

        const { isFetching } = api.endpoints.getUser.useQuery(1, {
          skip: value < 1,
        })
        getRenderCount = useRenderCounter()

        return (
          <div>
            <div data-testid="isFetching">{String(isFetching)}</div>
            <button onClick={() => setValue((val) => val + 1)}>
              Increment value
            </button>
          </div>
        )
      }

      render(<User />, { wrapper: storeRef.wrapper })
      expect(getRenderCount()).toBe(1)

      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )
      fireEvent.click(screen.getByText('Increment value')) // setState = 1, perform request = 2
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('true'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )
      expect(getRenderCount()).toBe(4)

      fireEvent.click(screen.getByText('Increment value'))
      // Being that nothing has changed in the args, this should never fire.
      expect(screen.getByTestId('isFetching').textContent).toBe('false')
      expect(getRenderCount()).toBe(5) // even though there was no request, the button click updates the state so this is an expected render
    })

    test('useQuery hook sets isLoading=true only on initial request', async () => {
      let refetch: any, isLoading: boolean, isFetching: boolean
      function User() {
        const [value, setValue] = useState(0)

        ;({ isLoading, isFetching, refetch } = api.endpoints.getUser.useQuery(
          2,
          {
            skip: value < 1,
          },
        ))
        return (
          <div>
            <div data-testid="isLoading">{String(isLoading)}</div>
            <div data-testid="isFetching">{String(isFetching)}</div>
            <button onClick={() => setValue((val) => val + 1)}>
              Increment value
            </button>
          </div>
        )
      }

      render(<User />, { wrapper: storeRef.wrapper })

      // Being that we skipped the initial request on mount, this should be false
      await waitFor(() =>
        expect(screen.getByTestId('isLoading').textContent).toBe('false'),
      )
      fireEvent.click(screen.getByText('Increment value'))
      // Condition is met, should load
      await waitFor(() =>
        expect(screen.getByTestId('isLoading').textContent).toBe('true'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isLoading').textContent).toBe('false'),
      ) // Make sure the original loading has completed.
      fireEvent.click(screen.getByText('Increment value'))
      // Being that we already have data, isLoading should be false
      await waitFor(() =>
        expect(screen.getByTestId('isLoading').textContent).toBe('false'),
      )
      // We call a refetch, should still be `false`
      act(() => void refetch())
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('true'),
      )
      expect(screen.getByTestId('isLoading').textContent).toBe('false')
    })

    test('useQuery hook sets isLoading and isFetching to the correct states', async () => {
      let refetchMe: () => void = () => {}
      function User() {
        const [value, setValue] = useState(0)
        getRenderCount = useRenderCounter(                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                //! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
   typeof exports === 'object' && typeof module !== 'undefined'
       && typeof require === 'function' ? factory(require('../moment')) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhTw = moment.defineLocale('zh-tw', {
        months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
            '_'
        ),
        monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
            '_'
        ),
        weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日 HH:mm',
            LLLL: 'YYYY年M月D日dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar: {
            sameDay: '[今天] LT',
            nextDay: '[明天] LT',
            nextWeek: '[下]dddd LT',
            lastDay: '[昨天] LT',
            lastWeek: '[上]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '週';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%s後',
            past: '%s前',
            s: '幾秒',
            ss: '%d 秒',
            m: '1 分鐘',
            mm: '%d 分鐘',
            h: '1 小時',
            hh: '%d 小時',
            d: '1 天',
            dd: '%d 天',
            M: '1 個月',
            MM: '%d 個月',
            y: '1 年',
            yy: '%d 年',
        },
    });

    return zhTw;

})));
                                                                                                                                                                                                                                                                                                                                                                               ptions('b', 1)

      await act(async () => {
        await waitMs(1)
      })

      unmount()

      await act(async () => {
        await waitMs(1)
      })

      // There should be no subscription entries left over after changing
      // cache key args and swapping `skip` on and off
      checkNumSubscriptions('b', 0)

      const finalSubscriptions = getSubscriptions()

      for (const cacheKeyEntry of Object.values(finalSubscriptions)) {
        expect(Object.values(cacheKeyEntry!).length).toBe(0)
      }
    })

    test('Hook subscription failures do not reset isLoading state', async () => {
      const states: boolean[] = []

      function Parent() {
        const { isLoading } = api.endpoints.getUserAndForceError.useQuery(1)

        // Collect loading states to verify that it does not revert back to true.
        states.push(isLoading)

        // Parent conditionally renders child when loading.
        if (isLoading) return null

        return <Child />
      }

      function Child() {
        // Using the same args as the parent
        api.endpoints.getUserAndForceError.useQuery(1)

        return null
      }

      render(<Parent />, { wrapper: storeRef.wrapper })

      // Allow at least three state effects to hit.
      // Trying to see if any [true, false, true] occurs.
      await act(async () => {
        await waitMs(1)
      })

      await act(async () => {
        await waitMs(1)
      })

      await act(async () => {
        await waitMs(1)
      })

      // Find if at any time the isLoading state has reverted
      // E.G.: `[..., true, false, ..., true]`
      //              ^^^^  ^^^^^       ^^^^
      const firstTrue = states.indexOf(true)
      const firstFalse = states.slice(firstTrue).indexOf(false)
      const revertedState = states.slice(firstFalse).indexOf(true)

      expect(
        revertedState,
        `Expected isLoading state to never revert back to true but did after ${revertedState} renders...`,
      ).toBe(-1)
    })

    describe('Hook middleware requirements', () => {
      let mock: MockInstance

      beforeEach(() => {
        mock = vi.spyOn(console, 'error').mockImplementation(() => {})
      })

      afterEach(() => {
        mock.mockReset()
      })

      test('Throws error if middleware is not added to the store', async () => {
        const store = configureStore({
          reducer: {
            [api.reducerPath]: api.reducer,
          },
        })

        const doRender = () => {
          const { result } = renderHook(
            () => api.endpoints.getIncrementedAmount.useQuery(),
            {
              wrapper: withProvider(store),
            },
          )
        }

        expect(doRender).toThrowError(
          /Warning: Middleware for RTK-Query API at reducerPath "api" has not been added to the store/,
        )
      })
    })
  })

  describe('useLazyQuery', () => {
    let data: any

    afterEach(() => {
      data = undefined
    })

    let getRenderCount: () => number = () => 0
    test('useLazyQuery does not automatically fetch when mounted and has undefined data', async () => {
      function User() {
        const [fetchUser, { data: hookData, isFetching, isUninitialized }] =
          api.endpoints.getUser.useLazyQuery()
        getRenderCount = useRenderCounter()

        data = hookData

        return (
          <div>
            <div data-testid="isUninitialized">{String(isUninitialized)}</div>
            <div data-testid="isFetching">{String(isFetching)}</div>
            <button data-testid="fetchButton" onClick={() => fetchUser(1)}>
              fetchUser
            </button>
          </div>
        )
      }

      render(<User />, { wrapper: storeRef.wrapper })
      expect(getRenderCount()).toBe(1)

      await waitFor(() =>
        expect(screen.getByTestId('isUninitialized').textContent).toBe('true'),
      )
      await waitFor(() => expect(data).toBeUndefined())

      fireEvent.click(screen.getByTestId('fetchButton'))
      expect(getRenderCount()).toBe(2)

      await waitFor(() =>
        expect(screen.getByTestId('isUninitialized').textContent).toBe('false'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )
      expect(getRenderCount()).toBe(3)

      fireEvent.click(screen.getByTestId('fetchButton'))
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('true'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )
      expect(getRenderCount()).toBe(5)
    })

    test('useLazyQuery accepts updated subscription options and only dispatches updateSubscriptionOptions when values are updated', async () => {
      let interval = 1000
      function User() {
        const [options, setOptions] = useState<SubscriptionOptions>()
        const [fetchUser, { data: hookData, isFetching, isUninitialized }] =
          api.endpoints.getUser.useLazyQuery(options)
        getRenderCount = useRenderCounter()

        data = hookData

        return (
          <div>
            <div data-testid="isUninitialized">{String(isUninitialized)}</div>
            <div data-testid="isFetching">{String(isFetching)}</div>

            <button data-testid="fetchButton" onClick={() => fetchUser(1)}>
              fetchUser
            </button>
            <button
              data-testid="updateOptions"
              onClick={() =>
                setOptions({
                  pollingInterval: interval,
                })
              }
            >
              updateOptions
            </button>
          </div>
        )
      }

      render(<User />, { wrapper: storeRef.wrapper })
      expect(getRenderCount()).toBe(1) // hook mount

      await waitFor(() =>
        expect(screen.getByTestId('isUninitialized').textContent).toBe('true'),
      )
      await waitFor(() => expect(data).toBeUndefined())

      fireEvent.click(screen.getByTestId('fetchButton'))
      expect(getRenderCount()).toBe(2)

      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('true'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )
      expect(getRenderCount()).toBe(3)

      fireEvent.click(screen.getByTestId('updateOptions')) // setState = 1
      expect(getRenderCount()).toBe(4)

      fireEvent.click(screen.getByTestId('fetchButton')) // perform new request = 2
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('true'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )
      expect(getRenderCount()).toBe(6)

      interval = 1000

      fireEvent.click(screen.getByTestId('updateOptions')) // setState = 1
      expect(getRenderCount()).toBe(7)

      fireEvent.click(screen.getByTestId('fetchButton'))
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('true'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )
      expect(getRenderCount()).toBe(9)

      expect(
        actions.filter(api.internalActions.updateSubscriptionOptions.match),
      ).toHaveLength(1)
    })

    test('useLazyQuery accepts updated args and unsubscribes the original query', async () => {
      function User() {
        const [fetchUser, { data: hookData, isFetching, isUninitialized }] =
          api.endpoints.getUser.useLazyQuery()

        data = hookData

        return (
          <div>
            <div data-testid="isUninitialized">{String(isUninitialized)}</div>
            <div data-testid="isFetching">{String(isFetching)}</div>

            <button data-testid="fetchUser1" onClick={() => fetchUser(1)}>
              fetchUser1
            </button>
            <button data-testid="fetchUser2" onClick={() => fetchUser(2)}>
              fetchUser2
            </button>
          </div>
        )
      }

      const { unmount } = render(<User />, { wrapper: storeRef.wrapper })

      await waitFor(() =>
        expect(screen.getByTestId('isUninitialized').textContent).toBe('true'),
      )
      await waitFor(() => expect(data).toBeUndefined())

      fireEvent.click(screen.getByTestId('fetchUser1'))

      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('true'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )

      // Being that there is only the initial query, no unsubscribe should be dispatched
      expect(
        actions.filter(api.internalActions.unsubscribeQueryResult.match),
      ).toHaveLength(0)

      fireEvent.click(screen.getByTestId('fetchUser2'))

      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('true'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('isFetching').textContent).toBe('false'),
      )

      expect(
        actions.filter(api.internalActions.unsubscribeQueryResult.match),
      ).toHaveLength(1)

      fireEvent.click(screen.getByTestId('fetchUser1'))

      expect(
        actions.filter(api.internalActions.unsubscribeQueryResult.match),
      ).toHaveLength(2)

      // we always unsubscribe the original promise and create a new one
      fireEvent.click(screen.getByTestId('fetchUser1'))
      expect(
        actions.filter(api.internalActions.unsubscribeQueryResult.match),
      ).toHaveLength(3)

      unmount()

      // We unsubscribe after the component unmounts
      expect(
        actions.filter(api.internalActions.unsubscribeQueryResult.match),
      ).toHaveLength(4)
    })

    test('useLazyQuery hook callback returns various properties to handle the result', async () => {
      function User() {
        const [getUser] = api.endpoints.getUser.useLazyQuery()
        const [{ successMsg, errMsg, isAborted }, setValues] = useState({
          successMsg: '',
          errMsg: '',
          isAborted: false,
        })

        const handleClick = (abort: boolean) => async () => {
          const res = getUser(1)

          // abort the query immediately to force an error
          if (abort) res.abort()
          res
            .unwrap()
            .then((result) => {
              setValues({
                successMsg: `Successfully fetched user ${result.name}`,
                errMsg: '',
                isAborted: false,
              })
            })
            .catch((err) => {
              setValues({
                successMsg: '',
                errMsg: `An error has occurred fetching userId: ${res.arg}`,
                isAborted: err.name === 'AbortError',
              })
            })
        }

        return (
          <div>
            <button onClick={handleClick(false)}>
              Fetch User successfully
            </button>
            <button onClick={handleClick(true)}>Fetch User and abort</button>
            <div>{successMsg}</div>
            <div>{errMsg}</div>
            <div>{isAborted ? 'Request was aborted' : ''}</div>
          </div>
        )
      }

      render(<User />, { wrapper: storeRef.wrapper })
      expect(screen.queryByText(/An error has occurred/i)).toBeNull()
      expect(screen.queryByText(/Successfully fetched user/i)).toBeNull()
      expect(screen.queryByText('Request was aborted')).toBeNull()

      fireEvent.click(
        screen.getByRole('button', { name: 'Fetch User and abort' }),
      )
      await screen.findByText('An error has occurred fetching userId: 1')
      expect(screen.queryByText(/Successfully fetched user/i)).toBeNull()
      screen.getByText('Request was aborted')

      fireEvent.click(
        screen.getByRole('button', { name: 'Fetch User successfully' }),
      )
      await screen.findByText('Successfully fetched user Timmy')
      expect(screen.queryByText(/An error has occurred/i)).toBeNull()
      expect(screen.queryByText('Request was aborted')).toBeNull()
    })

    test('unwrapping the useLazyQuery trigger result does not throw on ConditionError and instead returns the aggregate error', asyn-06:20:48.759 2958[E]: Error when attempting to associate image with GFE: GetSettingFromProfile(profile, settingId, setting) failed with status = -160 at [C:\dvs\p4\build\sw\rel\gfclient\rel_03_28\backend\NvAPI_Support\src\drssupport.cpp:355]
0830-06:20:48.774 2958[D]: Installed driver type is not CRD
0830-06:20:48.774 2958[E]: GFE::ApplicationUsageCollector::SendEvents - SendEvent failed: GetSettingFromProfile(profile, settingId, setting) failed with status = -160 at [C:\dvs\p4\build\sw\rel\gfclient\rel_03_28\backend\NvAPI_Support\src\drssupport.cpp:355]
0830-06:20:48.774 2958[E]: GFE::ApplicationUsageCollector::SendEvents - SendEvent failed: GetSettingFromProfile(profile, settingId, setting) failed with status = -160 at [C:\dvs\p4\build\sw\rel\gfclient\rel_03_28\backend\NvAPI_Support\src\drssupport.cpp:355]
0830-06:21:48.793 2958[I]: OnActiveProcessCountChanged called
0830-06:21:48.794 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:21:48.796 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:21:48.796 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:21:48.798 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:21:48.798 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:21:48.798 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:21:48.798 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:21:48.798 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:21:48.798 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:22:48.806 2958[I]: OnActiveProcessCountChanged called
0830-06:22:48.807 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:22:48.807 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:22:48.807 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:22:48.808 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:22:48.808 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:22:48.808 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:22:48.808 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:22:48.808 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:22:48.808 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:23:48.816 2958[I]: OnActiveProcessCountChanged called
0830-06:23:48.817 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:23:48.817 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:23:48.818 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:23:48.818 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:23:48.818 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:23:48.818 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:23:48.818 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:23:48.818 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:23:48.818 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:24:48.832 2958[I]: OnActiveProcessCountChanged called
0830-06:24:48.832 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:24:48.833 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:24:48.833 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:24:48.833 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:24:48.833 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:24:48.833 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:24:48.834 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:24:48.834 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:24:48.834 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:25:48.843 2958[I]: OnActiveProcessCountChanged called
0830-06:25:48.843 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:25:48.844 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:25:48.844 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:25:48.844 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:25:48.844 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:25:48.844 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:25:48.845 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:25:48.845 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:25:48.845 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:26:48.845 2958[I]: OnActiveProcessCountChanged called
0830-06:26:48.845 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:26:48.846 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 1
0830-06:26:48.846 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:26:48.847 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:26:48.847 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:26:48.847 2958[I]: No Inactive process are reported from NvAPI_GetAppStatisticsV2, fallback to read active session from NvAPI_GetAppStatisticsV2 whereas 1 are reported from NvAPI_GetAppStatistics
0830-06:26:48.847 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:26:48.847 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:26:48.847 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:26:48.847 2958[I]: No active/ innactive process are reported from NvAPI_GetAppStatisticsV2
0830-06:26:48.847 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:26:48.847 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:26:48.847 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:26:48.847 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:26:49.038 2958[E]: Error when attempting to associate image with GFE: GetSettingFromProfile(profile, settingId, setting) failed with status = -160 at [C:\dvs\p4\build\sw\rel\gfclient\rel_03_28\backend\NvAPI_Support\src\drssupport.cpp:355]
0830-06:26:49.077 2958[D]: Installed driver type is not CRD
0830-06:26:49.078 2958[E]: GFE::ApplicationUsageCollector::SendEvents - SendEvent failed: GetSettingFromProfile(profile, settingId, setting) failed with status = -160 at [C:\dvs\p4\build\sw\rel\gfclient\rel_03_28\backend\NvAPI_Support\src\drssupport.cpp:355]
0830-06:27:49.096 2958[I]: OnActiveProcessCountChanged called
0830-06:27:49.096 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:27:49.098 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:27:49.099 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:27:49.099 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:27:49.099 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:27:49.100 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:27:49.100 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:27:49.100 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:27:49.100 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:28:49.109 2958[I]: OnActiveProcessCountChanged called
0830-06:28:49.109 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:28:49.111 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 1
0830-06:28:49.111 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:28:49.113 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:28:49.113 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:28:49.113 2958[I]: No Inactive process are reported from NvAPI_GetAppStatisticsV2, fallback to read active session from NvAPI_GetAppStatisticsV2 whereas 1 are reported from NvAPI_GetAppStatistics
0830-06:28:49.113 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:28:49.114 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:28:49.114 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:28:49.114 2958[I]: No active/ innactive process are reported from NvAPI_GetAppStatisticsV2
0830-06:28:49.114 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:28:49.114 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:28:49.114 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:28:49.115 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:28:49.274 2958[E]: Error when attempting to associate image with GFE: GetSettingFromProfile(profile, settingId, setting) failed with status = -160 at [C:\dvs\p4\build\sw\rel\gfclient\rel_03_28\backend\NvAPI_Support\src\drssupport.cpp:355]
0830-06:28:49.284 2958[D]: Installed driver type is not CRD
0830-06:28:49.284 2958[E]: GFE::ApplicationUsageCollector::SendEvents - SendEvent failed: GetSettingFromProfile(profile, settingId, setting) failed with status = -160 at [C:\dvs\p4\build\sw\rel\gfclient\rel_03_28\backend\NvAPI_Support\src\drssupport.cpp:355]
0830-06:29:49.306 2958[I]: OnActiveProcessCountChanged called
0830-06:29:49.306 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:29:49.308 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:29:49.309 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:29:49.310 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:29:49.311 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:29:49.311 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:29:49.312 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:29:49.312 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:29:49.312 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:30:49.326 2958[I]: OnActiveProcessCountChanged called
0830-06:30:49.327 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:30:49.328 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:30:49.329 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:30:49.330 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:30:49.330 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:30:49.330 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:30:49.331 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:30:49.331 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:30:49.331 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:31:49.339 2958[I]: OnActiveProcessCountChanged called
0830-06:31:49.339 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:31:49.340 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:31:49.340 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:31:49.340 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:31:49.340 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:31:49.340 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:31:49.341 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:31:49.341 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:31:49.341 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:32:49.354 2958[I]: OnActiveProcessCountChanged called
0830-06:32:49.355 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:32:49.356 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:32:49.356 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:32:49.357 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:32:49.357 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:32:49.357 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:32:49.357 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:32:49.357 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:32:49.357 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:33:49.368 2958[I]: OnActiveProcessCountChanged called
0830-06:33:49.369 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:33:49.370 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:33:49.370 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:33:49.371 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:33:49.372 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:33:49.372 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:33:49.373 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:33:49.373 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:33:49.373 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:34:49.387 2958[I]: OnActiveProcessCountChanged called
0830-06:34:49.388 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:34:49.389 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:34:49.389 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:34:49.389 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:34:49.389 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:34:49.390 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:34:49.390 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:34:49.390 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:34:49.390 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:35:49.403 2958[I]: OnActiveProcessCountChanged called
0830-06:35:49.404 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:35:49.404 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 0
0830-06:35:49.404 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:35:49.405 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:35:49.405 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:35:49.405 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 2
0830-06:35:49.405 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 2 reported UniqueID : 0
0830-06:35:49.405 2958[I]: Unique ID reported from NvAPI_GetAppStatisticsV2 = 0
0830-06:35:49.405 2958[I]: NvAPI_GetAppStatisticsV2 did not reported Unique ID
0830-06:36:49.420 2958[I]: OnActiveProcessCountChanged called
0830-06:36:49.420 2958[I]: Calling NvAPI_GetAppStatistics with flag : 3
0830-06:36:49.421 2958[I]: NvAPI_GetAppStatistics returned NvAPI_Status = 0 flag : 3 reported entries : 3
0830-06:36:49.421 2958[I]: Calling NvAPI_GetAppStatisticsV2 with flag : 3
0830-06:36:49.421 2958[I]: NvAPI_GetAppStatisticsV2 returned NvAPI_Status = 0 flag : 3 reported UniqueID : 0
0830-06:36:49.421 2958[I]: NvAPI_GetAppStatisticsV2 reported 0 Unique ID
0830-06:36:49.421 2958[I]: No Inactive process are reported from NvAPI_                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                //! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

import moment from '../moment';

export default moment.defineLocale('zh-tw', {
    months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split(
        '_'
    ),
    monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split(
        '_'
    ),
    weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
    weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),
    weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'YYYY/MM/DD',
        LL: 'YYYY年M月D日',
        LLL: 'YYYY年M月D日 HH:mm',
        LLLL: 'YYYY年M月D日dddd HH:mm',
        l: 'YYYY/M/D',
        ll: 'YYYY年M月D日',
        lll: 'YYYY年M月D日 HH:mm',
        llll: 'YYYY年M月D日dddd HH:mm',
    },
    meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
            return hour;
        } else if (meridiem === '中午') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === '下午' || meridiem === '晚上') {
            return hour + 12;
        }
    },
    meridiem: function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return '凌晨';
        } else if (hm < 900) {
            return '早上';
        } else if (hm < 1130) {
            return '上午';
        } else if (hm < 1230) {
            return '中午';
        } else if (hm < 1800) {
            return '下午';
        } else {
            return '晚上';
        }
    },
    calendar: {
        sameDay: '[今天] LT',
        nextDay: '[明天] LT',
        nextWeek: '[下]dddd LT',
        lastDay: '[昨天] LT',
        lastWeek: '[上]dddd LT',
        sameElse: 'L',
    },
    dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '日';
            case 'M':
                return number + '月';
            case 'w':
            case 'W':
                return number + '週';
            default:
                return number;
        }
    },
    relativeTime: {
        future: '%s後',
        past: '%s前',
        s: '幾秒',
        ss: '%d 秒',
        m: '1 分鐘',
        mm: '%d 分鐘',
        h: '1 小時',
        hh: '%d 小時',
        d: '1 天',
        dd: '%d 天',
        M: '1 個月',
        MM: '%d 個月',
        y: '1 年',
        yy: '%d 年',
    },
});
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            selectFromResult option has a type error if the result is not an object', async () => {
      function SelectedPost() {
        const res2 = api.endpoints.getPosts.useQuery(undefined, {
          // selectFromResult must always return an object
          selectFromResult: ({ data }) => ({ size: data?.length ?? 0 }),
        })

        return (
          <div>
            <div data-testid="size2">{res2.size}</div>
          </div>
        )
      }

      render(
        <div>
          <SelectedPost />
        </div>,
        { wrapper: storeRef.wrapper },
      )

      expect(screen.getByTestId('size2').textContent).toBe('0')
    })
  })

  describe('selectFromResult (mutation) behavior', () => {
    const api = createApi({
      baseQuery: async (arg: any) => {
        await waitMs()
        if ('amount' in arg?.body) {
          amount += 1
        }
        return {
          data: arg?.body
            ? { ...arg.body, ...(amount ? { amount } : {}) }
            : undefined,
        }
      },
      endpoints: (build) => ({
        increment: build.mutation<{ amount: number }, number>({
          query: (amount) => ({
            url: '',
            method: 'POST',
            body: {
              amount,
            },
          }),
        }),
      }),
    })

    const storeRef = setupApiStore(api, {
      ...actionsReducer,
    })

    it('causes no more than one rerender when using selectFromResult with an empty object', async () => {
      function Counter() {
        const [increment] = api.endpoints.increment.useMutation({
          selectFromResult: () => ({}),
        })
        getRenderCount = useRenderCounter()

        return (
          <div>
            <button
              data-testid="incrementButton"
              onClick={() => increment(1)}
            ></button>
          </div>
        )
      }

      render(<Counter />, { wrapper: storeRef.wrapper })

      expect(getRenderCount()).toBe(1)

      fireEvent.click(screen.getByTestId('incrementButton'))
      await waitMs(200) // give our baseQuery a chance to return
      expect(getRenderCount()).toBe(2)

      fireEvent.click(screen.getByTestId('incrementButton'))
      await waitMs(200)
      expect(getRenderCount()).toBe(3)

      const { increment } = api.endpoints

      expect(storeRef.store.getState().actions).toMatchSequence(
        api.internalActions.middlewareRegistered.match,
        increment.matchPending,
        increment.matchFulfilled,
        increment.matchPending,
        api.internalActions.removeMutationResult.match,
        increment.matchFulfilled,
      )
    })

    it('causes rerenders when only selected data changes', async () => {
      function Counter() {
        const [increment, { data }] = api.endpoints.increment.useMutation({
          selectFromResult: ({ data }) => ({ data }),
        })
        getRenderCount = useRenderCounter()

        return (
          <div>
            <button
              data-testid="incrementButton"
              onClick={() => increment(1)}
            ></button>
            <div data-testid="data">{JSON.stringify(data)}</div>
          </div>
        )
      }

      render(<Counter />, { wrapper: storeRef.wrapper })

      expect(getRenderCount()).toBe(1)

      fireEvent.click(screen.getByTestId('incrementButton'))
      await waitFor(() =>
        expect(screen.getByTestId('data').textContent).toBe(
          JSON.stringify({ amount: 1 }),
        ),
      )
      expect(getRenderCount()).toBe(3)

      fireEvent.click(screen.getByTestId('incrementButton'))
      await waitFor(() =>
        expect(screen.getByTestId('data').textContent).toBe(
          JSON.stringify({ amount: 2 }),
        ),
      )
      expect(getRenderCount()).toBe(5)
    })

    it('causes the expected # of rerenders when NOT using selectFromResult', async () => {
      function Counter() {
        const [increment, data] = api.endpoints.increment.useMutation()
        getRenderCount = useRenderCounter()

        return (
          <div>
            <button
              data-testid="incrementButton"
              onClick={() => increment(1)}
            ></button>
            <div data-testid="status">{String(data.status)}</div>
          </div>
        )
      }

      render(<Counter />, { wrapper: storeRef.wrapper })

      expect(getRenderCount()).toBe(1) // mount, uninitialized status in substate

      fireEvent.click(screen.getByTestId('incrementButton'))

      expect(getRenderCount()).toBe(2) // will be pending, isLoading: true,
      await waitFor(() =>
        expect(screen.getByTestId('status').textContent).toBe('pending'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('status').textContent).toBe('fulfilled'),
      )
      expect(getRenderCount()).toBe(3)

      fireEvent.click(screen.getByTestId('incrementButton'))
      await waitFor(() =>
        expect(screen.getByTestId('status').textContent).toBe('pending'),
      )
      await waitFor(() =>
        expect(screen.getByTestId('status').textContent).toBe('fulfilled'),
      )
      expect(getRenderCount()).toBe(5)
    })

    it('useMutation with selectFromResult option has a type error if the result is not an object', async () => {
      function Counter() {
        const [increment] = api.endpoints.increment.useMutation({
          // selectFromResult must always return an object
          // @ts-expect-error
          selectFromResult: () => 42,
        })

        return (
          <div>
            <button
              data-testid="incrementButton"
              onClick={() => increment(1)}
            ></button>
          </div>
        )
      }

      render(<Counter />, { wrapper: storeRef.wrapper })
    })
  })
})

describe('skip behaviour', () => {
  const uninitialized = {
    status: QueryStatus.uninitialized,
    refetch: expect.any(Function),
    data: undefined,
    isError: false,
    isFetching: false,
    isLoading: false,
    isSuccess: false,
    isUninitialized: true,
  }

  test('normal skip', async () => {
    const { result, rerender } = renderHook(
      ([arg, options]: Parameters<typeof api.endpoints.getUser.useQuery>) =>
        api.endpoints.getUser.useQuery(arg, options),
      {
        wrapper: storeRef.wrapper,
        initialProps: [1, { skip: true }],
      },
    )

    expect(result.current).toEqual(uninitialized)
    await waitMs(1)
    expect(getSubscriptionCount('getUser(1)')).toBe(0)

    await act(async () => {
      rerender([1])
    })
    expect(result.current).toMatchObject({ status: QueryStatus.fulfilled })
    await waitMs(1)
    expect(getSubscriptionCount('getUser(1)')).toBe(1)

    await act(async () => {
      rerender([1, { skip: true }])
    })
    expect(result.current).toEqual({
      ...uninitialized,
      currentData: undefined,
      data: { name: 'Timmy' },
    })
    await waitMs(1)
    expect(getSubscriptionCount('getUser(1)')).toBe(0)
  })

  test('skipToken', async () => {
    const { result, rerender } = renderHook(
      ([arg, options]: Parameters<typeof api.endpoints.getUser.useQuery>) =>
        api.endpoints.getUser.useQuery(arg, options),
      {
        wrapper: storeRef.wrapper,
        initialProps: [skipToken],
      },
    )

    expect(result.current).toEqual(uninitialized)
    await waitMs(1)

    expect(getSubscriptionCount('getUser(1)')).toBe(0)
    // also no subscription on `getUser(skipToken)` or similar:
    expect(getSubscriptions()).toEqual({})

    await act(async () => {
      rerender([1])
    })
    expect(result.current).toMatchObject({ status: QueryStatus.fulfilled })
    await waitMs(1)
    expect(getSubscriptionCount('getUser(1)')).toBe(1)
    expect(getSubscriptions()).not.toEqual({})

    await act(async () => {
      rerender([skipToken])
    })
    expect(result.current).toEqual({
      ...uninitialized,
      currentData: undefined,
      data: { name: 'Timmy' },
    })
    await waitMs(1)
    expect(getSubscriptionCount('getUser(1)')).toBe(0)
  })

  test('skipping a previously fetched query retains the existing value as `data`, but clears `currentData`', async () => {
    const { result, rerender } = renderHook(
      ([arg, options]: Parameters<typeof api.endpoints.getUser.useQuery>) =>
        api.endpoints.getUser.useQuery(arg, options),
      {
        wrapper: storeRef.wrapper,
        initialProps: [1],
      },
    )

    await act(async () => {
      await waitMs(1)
    })

    // Normal fulfilled result, with both `data` and `currentData`
    expect(result.current).toMatchObject({
      status: QueryStatus.fulfilled,
      isSuccess: true,
      data: { name: 'Timmy' },
      currentData: { name: 'Timmy' },
    })

    await act(async () => {
      rerender([1, { skip: true }])
      await waitMs(1)
    })

    // After skipping, the query is "uninitialized", but still retains the last fetched `data`
    // even though it's skipped. `currentData` is undefined, since that matches the current arg.
    expect(result.current).toMatchObject({
      status: QueryStatus.uninitialized,
      isSuccess: false,
      data: { name: 'Timmy' },
      currentData: undefined,
    })
  })
})
