import type {
  AsyncThunk,
  SerializedError,
  ThunkDispatch,
  UnknownAction,
} from '@reduxjs/toolkit'
import {
  configureStore,
  createAsyncThunk,
  createReducer,
  createSlice,
  unwrapResult,
} from '@reduxjs/toolkit'

import type { TSVersion } from '@phryneas/ts-version'
import type { AxiosError } from 'axios'
import apiRequest from 'axios'

const defaultDispatch = (() => {}) as ThunkDispatch<{}, any, UnknownAction>
const unknownAction = { type: 'foo' } as UnknownAction

describe('type tests', () => {
  test('basic usage', async () => {
    const asyncThunk = createAsyncThunk('test', (id: number) =>
      Promise.resolve(id * 2),
    )

    const reducer = createReducer({}, (builder) =>
      builder
        .addCase(asyncThunk.pending, (_, action) => {
          expectTypeOf(action).toEqualTypeOf<
            ReturnType<(typeof asyncThunk)['pending']>
          >()
        })

        .addCase(asyncThunk.fulfilled, (_, action) => {
          expectTypeOf(action).toEqualTypeOf<
            ReturnType<(typeof asyncThunk)['fulfilled']>
          >()

          expectTypeOf(action.payload).toBeNumber()
        })

        .addCase(asyncThunk.rejected, (_, action) => {
          expectTypeOf(action).toEqualTypeOf<
            ReturnType<(typeof asyncThunk)['rejected']>
          >()

          expectTypeOf(action.error).toMatchTypeOf<Partial<Error> | undefined>()
        }),
    )

    const promise = defaultDispatch(asyncThunk(3))

    expectTypeOf(promise.requestId).toBeString()

    expectTypeOf(promise.arg).toBeNumber()

    expectTypeOf(promise.abort).toEqualTypeOf<(reason?: string) => void>()

    const result = await promise

    if (asyncThunk.fulfilled.match(result)) {
      expectTypeOf(result).toEqualTypeOf<
        ReturnType<(typeof asyncThunk)['fulfilled']>
      >()
    } else {
      expectTypeOf(result).toEqualTypeOf<
        ReturnType<(typeof asyncThunk)['rejected']>
      >()
    }

    promise
      .then(unwrapResult)
      .then((result) => {
        expectTypeOf(result).toBeNumber()

        expectTypeOf(result).not.toMatchTypeOf<Error>()
      })
      .catch((error) => {
        // catch is always any-typed, nothing we can do here
        expectTypeOf(error).toBeAny()
      })
  })

  test('More complex usage of thunk args', () => {
    interface BookModel {
      id: string
      title: string
    }

    type BooksState = BookModel[]

    const fakeBooks: BookModel[] = [
      { id: 'b', title: 'Second' },
      { id: 'a', title: 'First' },
    ]

    const correctDispatch = (() => {}) as ThunkDispatch<
      BookModel[],
      { userAPI: Function },
      UnknownAction
    >

    // Verify that the the first type args to createAsyncThunk line up right
    const fetchBooksTAC = createAsyncThunk<
      BookModel[],
      number,
      {
        state: BooksState
        extra: { userAPI: Function }
      }
    >(
      'books/fetch',
      async (arg, { getState, dispatch, extra, requestId, signal }) => {
        const state = getState()

        expectTypeOf(arg).toBeNumber()

        expectTypeOf(state).toEqualTypeOf<BookModel[]>()

        expectTypeOf(extra).toEqualTypeOf<{ userAPI: Function }>()

        return fakeBooks
      },
    )

    correctDispatch(fetchBooksTAC(1))
    // @ts-expect-error
    defaultDispatch(fetchBooksTAC(1))
  })

  test('returning a rejected action from the promise creator is possible', async () => {
    type ReturnValue = { data: 'success' }
    type RejectValue = { data: 'error' }

    const fetchBooksTAC = createAsyncThunk<
      ReturnValue,
      number,
      {
        rejectValue: RejectValue
      }
    >('books/fetch', async (arg, { rejectWithValue }) => {
      return rejectWithValue({ data: 'error' })
    })

    const returned = await defaultDispatch(fetchBooksTAC(1))
    if (fetchBooksTAC.rejected.match(returned)) {
      expectTypeOf(returned.payload).toEqualTypeOf<undefined | RejectValue>()

      expectTypeOf(returned.payload).toBeNullable()
    } else {
      expectTypeOf(returned.payload).toEqualTypeOf<ReturnValue>()
    }

    expectTypeOf(unwrapResult(returned)).toEqualTypeOf<ReturnValue>()

    expectTypeOf(unwrapResult(returned)).not.toMatchTypeOf<RejectValue>()
  })

  test('regression #1156: union return values fall back to allowing only single member', () => {
    const fn = createAsyncThunk('session/isAdmin', async () => {
      const response: boolean = false
      return response
    })
  })

  test('Should handle reject with value within a try catch block. Note: this is a sample code taken from #1605', () => {
    type ResultType = {
      text: string
    }
    const demoPromise = async (): Promise<ResultType> =>
      new Promise((resolve, _) => resolve({ text: '' }))
    const thunk = createAsyncThunk('thunk', async (args, thunkAPI) => {
      try {
        const result = await demoPromise()
        return result
      } catch (error) {
        return thunkAPI.rejectWithValue(error)
      }
    })
    createReducer({}, (builder) =>
      builder.addCase(thunk.fulfilled, (s, action) => {
        expectTypeOf(action.payload).toEqualTypeOf<ResultType>()
      }),
    )
  })

  test('reject with value', () => {
    interface Item {
      name: string
    }

    interface ErrorFromServer {
      error: string
    }

    interface CallsResponse {
      data: Item[]
    }

    const fetchLiveCallsError = createAsyncThunk<
      Item[],
      string,
      {
        rejectValue: ErrorFromServer
      }
    >('calls/fetchLiveCalls', async (organizationId, { rejectWithValue }) => {
      try {
        const result = await apiRequest.get<CallsResponse>(
          `organizations/${organizationId}/calls/live/iwill404`,
        )
        return result.data.data
      } catch (err) {
        const error: AxiosError<ErrorFromServer> = err as any // cast for access to AxiosError properties
        if (!error.response) {
          // let it be handled as any other unknown error
          throw err
        }
        return rejectWithValue(error.response && error.response.data)
      }
    })

    defaultDispatch(fetchLiveCallsError('asd')).then((result) => {
      if (fetchLiveCallsError.fulfilled.match(result)) {
        //success
        expectTypeOf(result).toEqualTypeOf<
          ReturnType<(typeof fetchLiveCallsError)['fulfilled']>
        >()

        expectTypeOf(result.payload).toEqualTypeOf<Item[]>()
      } else {
        expectTypeOf(result).toEqualTypeOf<
          ReturnType<(typeof fetchLiveCallsError)['rejected']>
        >()

        if (result.payload) {
          // rejected with value
          expectTypeOf(result.payload).toEqualTypeOf<ErrorFromServer>()
        } else {
          // rejected by throw
          expectTypeOf(result.payload).toBeUndefined()

          expectTypeOf(result.error).toEqualTypeOf<SerializedError>()

          expectTypeOf(result.error).not.toBeAny()
        }
      }
      defaultDispatch(fetchLiveCallsError('asd'))
        .then((result) => {
          expectTypeOf(result.payload).toEqualTypeOf<
            Item[] | ErrorFromServer | undefined
          >()

          return result
        })
        .then(unwrapResult)
        .then((unwrapped) => {
          expectTypeOf(unwrapped).toEqualTypeOf<Item[]>()

          expectTypeOf(unwrapResult).parameter(0).not.toMatchTypeOf(unwrapped)
        })
    })
  })

  describe('payloadCreator first argument type has impact on asyncThunk argument', () => {
    test('asyncThunk has no argument', () => {
      const asyncThunk = createAsyncThunk('test', () => 0)

      expectTypeOf(asyncThunk).toMatchTypeOf<() => any>()

      expectTypeOf(asyncThunk).parameters.toEqualTypeOf<[]>()

      expectTypeOf(asyncThunk).returns.toBeFunction()
    })

    test('one argument, specified as undefined: asyncThunk has no argument', () => {
      const asyncThunk = createAsyncThunk('test', (arg: undefined) => 0)

      expectTypeOf(asyncThunk).toMatchTypeOf<() => any>()

      expectTypeOf(asyncThunk).parameters.toEqualTypeOf<[]>()
    })

    test('one argument, specified as void: asyncThunk has no argument', () => {
      const asyncThunk = createAsyncThunk('test', (arg: void) => 0)

      expectTypeOf(asyncThunk).toMatchTypeOf<() => any>()
    })

    test('one argument, specified as optional number: asyncThunk has optional number argument', () => {
      // this test will fail with strictNullChecks: false, that is to be expected
      // in that case, we have to forbid this behaviour or it will make arguments optional everywhere
      const asyncThunk = createAsyncThunk('test', (arg?: number) => 0)

      // Per https://github.com/reduxjs/redux-toolkit/issues/3758#issuecomment-1742152774 , this is a bug in
      // TS 5.1 and 5.2, that is fixed in 5.3. Conditionally run the TS assertion here.
      type IsTS51Or52 = TSVersion.Major extends 5
        ? TSVersion.Minor extends 1 | 2
          ? true
          : false
        : false

      type expectedType = IsTS51Or52 extends true
        ? (arg: number) => any
        : (arg?: number) => any

      expectTypeOf(asyncThunk).toMatchTypeOf<expectedType>()

      // We _should_ be able to call this with no arguments, but we run into that error in 5.1 and 5.2.
      // Disabling this for now.
      // asyncThunk()
      expectTypeOf(asyncThunk).toBeCallableWith(5)

      expectTypeOf(asyncThunk).parameters.not.toMatchTypeOf<[string]>()
    })

    test('one argument, specified as number|undefined: asyncThunk has optional number argument', () => {
      // this test will fail with strictNullChecks: false, that is to be expected
      // in that case, we have to forbid this behaviour or it will make arguments optional everywhere
      const asyncThunk = createAsyncThunk(
        'test',
        (arg: number | undefined) => 0,
      )

      expectTypeOf(asyncThunk).toMatchTypeOf<(arg?: number) => any>()

      expectTypeOf(asyncThunk).toBeCallableWith()

      expectTypeOf(asyncThunk).toBeCallableWith(undefined)

      expectTypeOf(asyncThunk).toBeCallableWith(5)

      expectTypeOf(asyncThunk).parameters.not.toMatchTypeOf<[string]>()
    })

    test('one argument, specified as number|void: asyncThunk has optional number argument', () => {
      const asyncThunk = createAsyncThunk('test', (arg: number | void) => 0)

      expectTypeOf(asyncThunk).toMatchTypeOf<(arg?: number) => any>()

      expectTypeOf(asyncThunk).toBeCallableWith()

      expectTypeOf(asyncThunk).toBeCallableWith(undefined)

      expectTypeOf(asyncThunk).toBeCallableWith(5)

      expectTypeOf(asyncThunk).parameters.not.toMatchTypeOf<[string]>()
    })

    test('one argument, specified as any: asyncThunk has required any argument', () => {
      const asyncThunk = createAsyncThunk('test', (arg: any) => 0)

      expectTypeOf(asyncThunk).parameter(0).toBeAny()

      expectTypeOf(asyncThunk).toBeCallableWith(5)

      expectTypeOf(asyncThunk).parameters.not.toMatchTypeOf<[]>()
    })

    test('one argument, specified as unknown: asyncThunk has required unknown argument', () => {
      const asyncThunk = createAsyncThunk('test', (arg: unknown) => 0)

      expectTypeOf(asyncThunk).parameter(0).toBeUnknown()

      expectTypeOf(asyncThunk).toBeCallableWith(5)

      expectTypeOf(asyncThunk).parameters.not.toMatchTypeOf<[]>()
    })

    test('one argument, specified as number: asyncThunk has required number argument', () => {
      const asyncThunk = createAsyncThunk('test', (arg: number) => 0)

      expectTypeOf(asyncThunk).toMatchTypeOf<(arg: number) => any>()

      expectTypeOf(asyncThunk).toBeCallableWith(5)

      expectTypeOf(asyncThunk).parameters.not.toMatchTypeOf<[]>()
    })

    test('two arguments, first specified as undefined: asyncThunk has no argument', () => {
      const asyncThunk = createAsyncThunk(
        'test',
        (arg: undefined, thunkApi) => 0,
      )

      expectTypeOf                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           