var he=(l=>(l.uninitialized="uninitialized",l.pending="pending",l.fulfilled="fulfilled",l.rejected="rejected",l))(he||{});function Ee(e){return{status:e,isUninitialized:e==="uninitialized",isLoading:e==="pending",isSuccess:e==="fulfilled",isError:e==="rejected"}}import{createAction as L,createSlice as W,createSelector as Me,createAsyncThunk as Qe,combineReducers as ke,createNextState as re,isAnyOf as $,isAllOf as ue,isAction as Be,isPending as ye,isRejected as G,isFulfilled as q,isRejectedWithValue as Y,isAsyncThunkAction as Re,prepareAutoBatched as X,SHOULD_AUTOBATCH as ie,isPlainObject as _,nanoid as Pe}from"@reduxjs/toolkit";var ve=_;function de(e,r){if(e===r||!(ve(e)&&ve(r)||Array.isArray(e)&&Array.isArray(r)))return r;let c=Object.keys(r),g=Object.keys(e),l=c.length===g.length,Q=Array.isArray(r)?[]:{};for(let S of c)Q[S]=de(e[S],r[S]),l&&(l=e[S]===Q[S]);return l?e:Q}function j(e){let r=0;for(let c in e)r++;return r}var Se=e=>[].concat(...e);function Ce(e){return new RegExp("(^|:)//").test(e)}function we(){return typeof document>"u"?!0:document.visibilityState!=="hidden"}function xe(e){return e!=null}function Fe(){return typeof navigator>"u"||navigator.onLine===void 0?!0:navigator.onLine}var yt=e=>e.replace(/\/$/,""),dt=e=>e.replace(/^\//,"");function Ie(e,r){if(!e)return r;if(!r)return e;if(Ce(r))return r;let c=e.endsWith("/")||!r.startsWith("?")?"/":"";return e=yt(e),r=dt(r),`${e}${c}${r}`}var Oe=(...e)=>fetch(...e),pt=e=>e.status>=200&&e.status<=299,ct=e=>/ion\/(vnd\.api\+)?json/.test(e.get("content-type")||"");function qe(e){if(!_(e))return e;let r={...e};for(let[c,g]of Object.entries(r))g===void 0&&delete r[c];return r}function lt({baseUrl:e,prepareHeaders:r=d=>d,fetchFn:c=Oe,paramsSerializer:g,isJsonContentType:l=ct,jsonContentType:Q="application/json",jsonReplacer:S,timeout:E,responseHandler:M,validateStatus:f,...x}={}){return typeof fetch>"u"&&c===Oe&&console.warn("Warning: `fetch` is not available. Please supply a custom `fetchFn` property to use `fetchBaseQuery` on SSR environments."),async(n,t)=>{let{signal:m,getState:R,extra:y,endpoint:u,forced:o,type:a}=t,i,{url:s,headers:T=new Headers(x.headers),params:p=void 0,responseHandler:h=M??"json",validateStatus:b=f??pt,timeout:A=E,...k}=typeof n=="string"?{url:n}:n,D={...x,signal:m,...k};T=new Headers(qe(T)),D.headers=await r(T,{getState:R,extra:y,endpoint:u,forced:o,type:a})||T;let B=v=>typeof v=="object"&&(_(v)||Array.isArray(v)||typeof v.toJSON=="function");if(!D.headers.has("content-type")&&B(D.body)&&D.headers.set("content-type",Q),B(D.body)&&l(D.headers)&&(D.body=JSON.stringify(D.body,S)),p){let v=~s.indexOf("?")?"&":"?",C=g?g(p):new URLSearchParams(qe(p));s+=v+C}s=Ie(e,s);let P=new Request(s,D);i={request:new Request(s,D)};let I,N=!1,F=A&&setTimeout(()=>{N=!0,t.abort()},A);try{I=await c(P)}catch(v){return{error:{status:N?"TIMEOUT_ERROR":"FETCH_ERROR",error:String(v)},meta:i}}finally{F&&clearTimeout(F)}let K=I.clone();i.response=K;let O,ne="";try{let v;if(await Promise.all([d(I,h).then(C=>O=C,C=>v=C),K.text().then(C=>ne=C,()=>{})]),v)throw v}catch(v){return{error:{status:"PARSING_ERROR",originalStatus:I.status,data:ne,error:String(v)},meta:i}}return b(I,O)?{data:O,meta:i}:{error:{status:I.status,data:O},meta:i}};async function d(n,t){if(typeof t=="function")return t(n);if(t==="content-type"&&(t=l(n.headers)?"json":"text"),t==="json"){let m=await n.text();return m.length?JSON.parse(m):null}return n.text()}}var U=class{constructor(r,c=void 0){this.value=r;this.meta=c}};async function ft(e=0,r=5){let c=Math.min(e,r),g=~~((Math.random()+.4)*(300<<c));await new Promise(l=>setTimeout(Q=>l(Q),g))}function mt(e){throw Object.assign(new U({error:e}),{throwImmediately:!0})}var Ne={},gt=(e,r)=>async(c,g,l)=>{let Q=[5,(r||Ne).maxRetries,(l||Ne).maxRetries].filter(x=>x!==void 0),[S]=Q.slice(-1),M={maxRetries:S,backoff:ft,retryCondition:(x,d,{attempt:n})=>n<=S,...r,...l},f=0;for(;;)try{let x=await e(c,g,l);if(x.error)throw new U(x);return x}catch(x){if(f++,x.throwImmediately){if(x instanceof U)return x.value;throw x}if(x instanceof U&&!M.retryCondition(x.value.error,c,{attempt:f,baseQueryApi:g,extraOptions:l}))return x.value;await M.backoff(f,M.maxRetries)}},Tt=Object.assign(gt,{fail:mt});var z=L("__rtkq/focused"),Z=L("__rtkq/unfocused"),V=L("__rtkq/online"),ee=L("__rtkq/offline"),Ae=!1;function ht(e,r){function c(){let g=()=>e(z()),l=()=>e(Z()),Q=()=>e(V()),S=()=>e(ee()),E=()=>{window.document.visibilityState==="visible"?g():l()};return Ae||typeof window<"u"&&window.addEventListener&&(window.addEventListener("visibilitychange",E,!1),window.addEventListener("focus",g,!1),window.addEventListener("online",Q,!1),window.addEventListener("offline",S,!1),Ae=!0),()=>{window.removeEventListener("focus",g),window.removeEventListener("visibilitychange",E),window.removeEventListener("online",Q),window.removeEventListener("offline",S),Ae=!1}}return r?r(e,{onFocus:z,onFocusLost:Z,onOffline:ee,onOnline:V}):c()}function ce(e){return e.type==="query"}function Ke(e){return e.type==="mutation"}function oe(e,r,c,g,l,Q){return Qt(e)?e(r,c,g,l).map(pe).map(Q):Array.isArray(e)?e.map(pe).map(Q):[]}function Qt(e){return typeof e=="function"}function pe(e){return typeof e=="string"?{type:e}:e}import{isDraftable as Rt,produceWithPatches as St}from"immer";import"@reduxjs/toolkit";function je(e,r){return e.catch(r)}var te=Symbol("forceQueryFn"),ae=e=>typeof e[te]=="function";function Ue({serializeQueryArgs:e,queryThunk:r,mutationThunk:c,api:g,context:l}){let Q=new Map,S=new Map,{unsubscribeQueryResult:E,removeMutationResult:M,updateSubscriptionOptions:f}=g.internalActions;return{buildInitiateQuery:R,buildInitiateMutation:y,getRunningQueryThunk:x,getRunningMutationThunk:d,getRunningQueriesThunk:n,getRunningMutationsThunk:t};function x(u,o){return a=>{let i=l.endpointDefinitions[u],s=e({queryArgs:o,endpointDefinition:i,endpointName:u});return Q.get(a)?.[s]}}function d(u,o){return a=>S.get(a)?.[o]}function n(){return u=>Object.values(Q.get(u)||{}).filter(xe)}function t(){return u=>Object.values(S.get(u)||{}).filter(xe)}function m(u){}function R(u,o){let a=(i,{subscribe:s=!0,forceRefetch:T,subscriptionOptions:p,[te]:h,...b}={})=>(A,k)=>{let D=e({queryArgs:i,endpointDefinition:o,endpointName:u}),B=r({...b,type:"query",subscribe:s,forceRefetch:T,subscriptionOptions:p,endpointName:u,originalArgs:i,queryCacheKey:D,[te]:h}),P=g.endpoints[u].select(i),w=A(B),I=P(k());let{requestId:N,abort:F}=w,K=I.requestId!==N,O=Q.get(A)?.[D],ne=()=>P(k()),v=Object.assign(h?w.then(ne):K&&!O?Promise.resolve(I):Promise.all([O,w]).then(ne),{arg:i,requestId:N,subscriptionOptions:p,queryCacheKey:D,abort:F,async unwrap(){let C=await v;if(C.isError)throw C.error;return C.data},refetch:()=>A(a(i,{subscribe:!1,forceRefetch:!0})),unsubscribe(){s&&A(E({queryCacheKey:D,requestId:N}))},updateSubscriptionOptions(C){v.subscriptionOptions=C,A(f({endpointName:u,requestId:N,queryCacheKey:D,options:C}))}});if(!O&&!K&&!h){let C=Q.get(A)||{};C[D]=v,Q.set(A,C),v.then(()=>{delete C[D],j(C)||Q.delete(A)})}return v};return a}function y(u){return(o,{track:a=!0,fixedCacheKey:i}={})=>(s,T)=>{let p=c({type:"mutation",endpointName:u,originalArgs:o,track:a,fixedCacheKey:i}),h=s(p);let{requestId:b,abort:A,unwrap:k}=h,D=je(h.unwrap().then(I=>({data:I})),I=>({error:I})),B=()=>{s(M({requestId:b,fixedCacheKey:i}))},P=Object.assign(D,{arg:h.arg,requestId:b,abort:A,unwrap:k,reset:B}),w=S.get(s)||{};return S.set(s,w),w[b]=P,P.then(()=>{delete w[b],j(w)||S.delete(s)}),i&&(w[i]=P,P.then(()=>{w[i]===P&&(delete w[i],j(w)||S.delete(s))})),P}}}function Le(e){return e}function He({reducerPath:e,baseQuery:r,context:{endpointDefinitions:c},serializeQueryArgs:g,api:l,assertTagType:Q}){let S=(o,a,i,s)=>(T,p)=>{let h=c[o],b=g({queryArgs:a,endpointDefinition:h,endpointName:o});if(T(l.internalActions.queryResultPatched({queryCacheKey:b,patches:i})),!s)return;let A=l.endpoints[o].select(a)(p()),k=oe(h.providesTags,A.data,void 0,a,{},Q);T(l.internalActions.updateProvidedBy({queryCacheKey:b,providedTags:k}))},E=(o,a,i,s=!0)=>(T,p)=>{let b=l.endpoints[o].select(a)(p()),A={patches:[],inversePatches:[],undo:()=>T(l.util.patchQueryData(o,a,A.inversePatches,s))};if(b.status==="uninitialized")retur                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                illed.match(n)||r.rejected.match(n)&&!n.meta.condition)&&E(n.meta.arg,t),c.util.resetApiState.match(n)&&x()};function E({queryCacheKey:n},t){let m=t.getState()[e],R=m.queries[n],y=l.currentSubscriptions[n];if(!R||R.status==="uninitialized")return;let{lowestPollingInterval:u,skipPollingIfUnfocused:o}=d(y);if(!Number.isFinite(u))return;let a=Q[n];a?.timeout&&(clearTimeout(a.timeout),a.timeout=void 0);let i=Date.now()+u;Q[n]={nextPollTimestamp:i,pollingInterval:u,timeout:setTimeout(()=>{(m.config.focused||!o)&&t.dispatch(g(R,n)),E({queryCacheKey:n},t)},u)}}function M({queryCacheKey:n},t){let R=t.getState()[e].queries[n],y=l.currentSubscriptions[n];if(!R||R.status==="uninitialized")return;let{lowestPollingInterval:u}=d(y);if(!Number.isFinite(u)){f(n);return}let o=Q[n],a=Date.now()+u;(!o||a<o.nextPollTimestamp)&&E({queryCacheKey:n},t)}function f(n){let t=Q[n];t?.timeout&&clearTimeout(t.timeout),delete Q[n]}function x(){for(let n of Object.keys(Q))f(n)}function d(n={}){let t=!1,m=Number.POSITIVE_INFINITY;for(let R in n)n[R].pollingInterval&&(m=Math.min(n[R].pollingInterval,m),t=n[R].skipPollingIfUnfocused||t);return{lowestPollingInterval:m,skipPollingIfUnfocused:t}}return S};var at=({api:e,context:r,queryThunk:c,mutationThunk:g})=>{let l=ye(c,g),Q=G(c,g),S=q(c,g),E={};return(f,x)=>{if(l(f)){let{requestId:d,arg:{endpointName:n,originalArgs:t}}=f.meta,m=r.endpointDefinitions[n],R=m?.onQueryStarted;if(R){let y={},u=new Promise((s,T)=>{y.resolve=s,y.reject=T});u.catch(()=>{}),E[d]=y;let o=e.endpoints[n].select(m.type==="query"?t:d),a=x.dispatch((s,T,p)=>p),i={...x,getCacheEntry:()=>o(x.getState()),requestId:d,extra:a,updateCachedData:m.type==="query"?s=>x.dispatch(e.util.updateQueryData(n,t,s)):void 0,queryFulfilled:u};R(t,i)}}else if(S(f)){let{requestId:d,baseQueryMeta:n}=f.meta;E[d]?.resolve({data:f.payload,meta:n}),delete E[d]}else if(Q(f)){let{requestId:d,rejectedWithValue:n,baseQueryMeta:t}=f.meta;E[d]?.reject({error:f.payload??f.error,isUnhandledError:!n,meta:t}),delete E[d]}}};var st=({reducerPath:e,context:r,api:c,refetchQuery:g,internalState:l})=>{let{removeQueryResult:Q}=c.internalActions,S=(M,f)=>{z.match(M)&&E(f,"refetchOnFocus"),V.match(M)&&E(f,"refetchOnReconnect")};function E(M,f){let x=M.getState()[e],d=x.queries,n=l.currentSubscriptions;r.batch(()=>{for(let t of Object.keys(n)){let m=d[t],R=n[t];if(!R||!m)continue;(Object.values(R).some(u=>u[f]===!0)||Object.values(R).every(u=>u[f]===void 0)&&x.config[f])&&(j(R)===0?M.dispatch(Q({queryCacheKey:t})):m.status!=="uninitialized"&&M.dispatch(g(m,t)))}})}return S};function ut(e){let{reducerPath:r,queryThunk:c,api:g,context:l}=e,{apiUid:Q}=l,S={invalidateTags:L(`${r}/invalidateTags`)},E=d=>d.type.startsWith(`${r}/`),M=[rt,et,it,ot,nt,at];return{middleware:d=>{let n=!1,m={...e,internalState:{currentSubscriptions:{}},refetchQuery:x,isThisApiSliceAction:E},R=M.map(o=>o(m)),y=Ze(m),u=st(m);return o=>a=>{if(!Be(a))return o(a);n||(n=!0,d.dispatch(g.internalActions.middlewareRegistered(Q)));let i={...d,next:o},s=d.getState(),[T,p]=y(a,i,s),h;if(T?h=o(a):h=p,d.getState()[r]&&(u(a,i,s),E(a)||l.hasRehydrationInfo(a)))for(let b of R)b(a,i,s);return h}},actions:S};function x(d,n,t={}){return c({type:"query",endpointName:d.endpointName,originalArgs:d.originalArgs,subscribe:!1,forceRefetch:!0,queryCacheKey:n,...t})}}var Te=Symbol(),be=({createSelector:e=Me}={})=>({name:Te,init(r,{baseQuery:c,tagTypes:g,reducerPath:l,serializeQueryArgs:Q,keepUnusedDataFor:S,refetchOnMountOrArgChange:E,refetchOnFocus:M,refetchOnReconnect:f,invalidationBehavior:x},d){vt();let n=F=>(typeof process<"u",F);Object.assign(r,{reducerPath:l,endpoints:{},internalActions:{onOnline:V,onOffline:ee,onFocus:z,onFocusLost:Z},util:{}});let{queryThunk:t,mutationThunk:m,patchQueryData:R,updateQueryData:y,upsertQueryData:u,prefetch:o,buildMatchThunkActions:a}=He({baseQuery:c,reducerPath:l,context:d,api:r,serializeQueryArgs:Q,assertTagType:n}),{reducer:i,actions:s}=Ve({context:d,queryThunk:t,mutationThunk:m,reducerPath:l,assertTagType:n,config:{refetchOnFocus:M,refetchOnReconnect:f,refetchOnMountOrArgChange:E,keepUnusedDataFor:S,reducerPath:l,invalidationBehavior:x}});H(r.util,{patchQueryData:R,updateQueryData:y,upsertQueryData:u,prefetch:o,resetApiState:s.resetApiState}),H(r.internalActions,s);let{middleware:T,actions:p}=ut({reducerPath:l,context:d,queryThunk:t,mutationThunk:m,api:r,assertTagType:n});H(r.util,p),H(r,{reducer:i,middleware:T});let{buildQuerySelector:h,buildMutationSelector:b,selectInvalidatedBy:A,selectCachedArgsForQuery:k}=Ge({serializeQueryArgs:Q,reducerPath:l,createSelector:e});H(r.util,{selectInvalidatedBy:A,selectCachedArgsForQuery:k});let{buildInitiateQuery:D,buildInitiateMutation:B,getRunningMutationThunk:P,getRunningMutationsThunk:w,getRunningQueriesThunk:I,getRunningQueryThunk:N}=Ue({queryThunk:t,mutationThunk:m,api:r,serializeQueryArgs:Q,context:d});return H(r.util,{getRunningMutationThunk:P,getRunningMutationsThunk:w,getRunningQueryThunk:N,getRunningQueriesThunk:I}),{name:Te,injectEndpoint(F,K){let O=r;O.endpoints[F]??={},ce(K)?H(O.endpoints[F],{name:F,select:h(F,K),initiate:D(F,K)},a(t,F)):Ke(K)&&H(O.endpoints[F],{name:F,select:b(),initiate:B(F)},a(m,F))}}}});var Ct=De(be());export{he as QueryStatus,Et as _NEVER,De as buildCreateApi,de as copyWithStructuralSharing,be as coreModule,Te as coreModuleName,Ct as createApi,ge as defaultSerializeQueryArgs,Mt as fakeBaseQuery,lt as fetchBaseQuery,Tt as retry,ht as setupListeners,me as skipToken};
//# sourceMappingURL=rtk-query.browser.mjs.map