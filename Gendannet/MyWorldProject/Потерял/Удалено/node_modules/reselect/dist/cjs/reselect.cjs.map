ent(r);let f="",h="";if(u!="Person"){const n={triggeringMode:"Explicit",intent:u};e&&(n.entityId=e);f=JSON.stringify(n);h=encodeURIComponent(f)}let i=n.formatString(n.config.bfbSearchUrl||"",[v,h,o]);i=await this.addMsbUserInfoParameterToUrlAsync(i);const c=_G.IG||n.cleanGuid(n.Host.createGuid());i=this.insertParameter(i,`cvid=${encodeURIComponent(c)}`);const l=n.cleanGuid(n.Host.createGuid());i=this.insertParameter(i,`ssat=${encodeURIComponent(l)}`);const a=n.cleanGuid(n.Host.createGuid());return i=this.insertParameter(i,`lgid=${encodeURIComponent(a)}`),i=this.addTransferIgToUrl(i),s&&(i=this.appendHash(i,s)),{url:i,urlParams:{query:r,cvid:c,msbd:f,ssat:l,lgid:a,formCode:o,impressionId:this.transferIg}}}mapGccRegionToMsbApiEnv(n){return n==1?"prod_gcc":n==2?"prod_gcch":undefined}async addMsbUserInfoParameterToUrlAsync(t){if(!t||typeof crypto!="object")return _w.bfbWsbTel&&bfbWsbTel.logError("Wsb add user info to URL error",`No "window.crypto" object`),t;const i=n.msbHost.getAadUserInfo();if(!(i===null||i===void 0?void 0:i.tenantId)||!(i===null||i===void 0?void 0:i.userAadId))return _w.bfbWsbTel&&bfbWsbTel.logError("Wsb add user info to URL error",`No user info.`),t;const u=this.getSecureSalt();if(!u)return t;try{const r=`${i===null||i===void 0?void 0:i.userAadId.toLowerCase()}@${i===null||i===void 0?void 0:i.tenantId.toLowerCase()}@${u.toLowerCase()}`,f=Uint8Array.from(r.split("").map(n=>n.charCodeAt(0))),e=await crypto.subtle.digest("SHA-256",f),o=new Uint8Array(e);let n="";for(const t of o)n+=t.toString(16).padStart(2,"0");const s=`olu=${n}&olus=${u}`;return this.insertParameter(t,s)}catch(r){return _w.bfbWsbTel&&bfbWsbTel.logError("Wsb add user info to URL error",`Exception: ${(r===null||r===void 0?void 0:r.message)||JSON.stringify(r)}`),t}}async launchUriAsync(t){return await n.Host.launchUrlWithHttpProtocolAsync(t,{medium:"MSBLink"})}getSecureSalt(){try{const n=new Uint8Array(16);return _w.crypto.getRandomValues(n),Array.from(n).map(n=>n.toString(16).padStart(2,"0")).join("")}catch(n){return _w.bfbWsbTel&&bfbWsbTel.logError("Wsb add user info to URL error",`Generate salt throws: ${(n===null||n===void 0?void 0:n.message)||JSON.stringify(n)}`),""}}addTransferIgToUrl(n){return n?this.insertParameter(n,`ig=${encodeURIComponent(this.transferIg)}`):n}getTransferIg(){return this.transferIg}insertParameter(n,t){if(!n||!t)return n;const i=n.indexOf("#");if(i<0)return this.appendParameter(n,t);else{const r=n.substring(0,i),u=n.substring(i);return`${this.appendParameter(r,t)}${u}`}}appendParameter(n,t){const i=n.indexOf("?"),r=i<0?"?":"&";return`${n}${r}${t}`}getUrlBaseInfo(n){var t;if((t=n===null||n===void 0?void 0:n.match(/[^?#]*/))!==null&&t!==void 0)return t[0]}}n.MsbUrlUtils=i}(WSB||(WSB={})),function(n){class t{getFluentIcon(n){switch(n){case"microsoft365Icon":return this.getMicrosoft365Icon();case"outlookIcon":return this.getOutlookIcon();case"teamsIcon":return this.getTeamsIcon();case"webSearchDarkIcon":return this.getWebSearchDarkIcon();case"webSearchLightIcon":return this.getWebSearchLightIcon();case"atIcon":return this.getAtIcon();case"atCommentIcon":return this.getAtCommentIcon();case"bookmarkIcon":return this.getBookmarkIcon();case"commentIcon":return this.getCommentIcon();case"editIcon":return this.getEditIcon();case"openFolderIcon":return this.getOpenFolderIcon();case"postIcon":return this.getPostIcon();case"recordingIcon":return this.getRecordingIcon();case"trendingIcon":return this.getTrendingIcon();case"peopleIcon":return this.getPeopleIcon();case"viewedIcon":return this.getViewedIcon();case"calendarIcon":return this.getCalendarIcon();case"linkIcon":return this.getLinkIcon();case"checkIcon":return this.getCheckIcon();case"infoIcon":return this.getInfoIcon();case"infoIconHover":return this.getInfoIconHoverIcon();case"cancelIcon":return this.getCancelIcon();case"searchIcon":return this.getSearchIcon();case"orgIcon":return this.getOrgIcon();case"personIcon":return this.getPersonIcon();case"historyIcon":return this.getHistoryIcon();case"newsIcon":return this.getNewsIcon();case"arrowTrendingIcon":return this.getArrowTrendingIcon();case"backpackIcon":return this.getBackpackIcon();case"caretRight":return this.getCaretRightIcon();case"caretLeft":return this.getCaretLeftIcon();case"acronymsIcon":return this.getAcronymsIcon();case"listBceIcon":return this.getListBceIcon();case"chatBceIcon":return this.getChatBceIcon();case"editBceIcon":return this.getEditBceIcon();case"composeBcbIcon":return this.getComposeBcbIcon();case"dataUsageBcbIcon":return this.getDataUsageBcbIcon();case"scalesBcbIcon":return this.getScalesBcbIcon();case"shieldIcon":return this.getShieldIcon();case"previewIcon":return this.getPreviewIcon();case"colorfulBookmarkIcon":return this.getColorfulBookmarkIcon();case"workIcon":return this.getWorkIcon();case"msbQnaIcon":return this.getMsbQnaIcon();case"acronymIcon":return this.getAcronymIcon();default:return undefined}}getMicrosoft365Icon(){return{type:0,content:n.getImageUrl("ODSWG.127c5f77-db04-46d6-88ee-c15fdb5ac572")}}getOutlookIcon(){return{type:0,content:n.getImageUrl("ODSWG.b4161fae-7206-40b0-b5a3-3c6b97cdb7c0")}}getTeamsIcon(){return{type:0,content:n.getImageUrl("ODSWG.da4d429b-20bd-4875-8d22-fffa7025c146")}}getWebSearchDarkIcon(){return{type:0,content:n.getImageUrl("ODSWG.b75f295a-545d-4d58-ada8-0b1442214b58")}}getWebSearchLightIcon(){return{type:0,content:n.getImageUrl("ODSWG.1888f892-680f-41e2-85ed-7b60767e32ba")}}getAtIcon(){return{type:0,content:n.getImageUrl("ODSWG.a1fde47c-a964-4b19-a2de-6bc5ba7b1e96")}}getAtCommentIcon(){return{type:0,content:n.getImageUrl("ODSWG.98562bb6-d611-4890-b537-57e43497a0bc")}}getBookmarkIcon(){return{type:0,content:n.getImageUrl("ODSWG.357f24c9-153e-4dc1-8778-b92337fda1fc")}}getCommentIcon(){return{type:0,content:n.getImageUrl("ODSWG.411739d3-beb5-4b2b-a781-60213fa4cf87")}}getEditIcon(){return{type:0,content:n.getImageUrl("ODSWG.69b339e9-45f3-4eca-b294-d3e78aea2152")}}getOpenFolderIcon(){return{type:0,content:n.getImageUrl("ODSWG.b9d01896-15cd-4010-ab7d-d4a97704f5be")}}getPostIcon(){return{type:0,content:n.getImageUrl("ODSWG.9f33a1e6-eaf4-4749-b4d5-1c6ce0dfa797")}}getRecordingIcon(){return{type:0,content:n.getImageUrl("ODSWG.9f068dfe-4e4c-43c5-b92a-69e80cd8ac44")}}getTrendingIcon(){return{type:0,content:n.getImageUrl("ODSWG.b30c50c8-bfbd-4b5b-9500-8153da0c9b62")}}getPeopleIcon(){return{type:0,content:n.getImageUrl("ODSWG.5b08e224-7dd5-4df7-8bf9-33ec5171f0a9")}}getViewedIcon(){return{type:0,content:n.getImageUrl("ODSWG.7322d533-2e2b-4dec-a485-c66e432e3898")}}getCalendarIcon(){return{type:0,content:n.getImageUrl("ODSWG.3a519ee0-7799-450e-947c-49673f688461")}}getLinkIcon(){return{type:0,content:n.getImageUrl("ODSWG.fc0de4ec-705c-4f99-bc74-c683d6795c8f")}}getCheckIcon(){return{type:0,content:n.getImageUrl("ODSWG.c143d02f-c1f1-4775-93ec-885ab80c98c3")}}getInfoIcon(){return{type:0,content:n.getImageUrl("ODSWG.d1896b17-077e-4e0e-a0e5-a2f03f0e894a")}}getInfoIconHoverIcon(){return{type:0,content:n.getImageUrl("ODSWG.3f565229-5700-450d-8986-ec28675835b9")}}getCancelIcon(){return{type:0,content:n.getImageUrl("ODSWG.5d6f842f-006f-4c89-afc3-6a4417ab74de")}}getSearchIcon(){return{type:0,content:n.getImageUrl("ODSWG.f1b4a79e-ac18-4faa-aef9-ee96b5542fe1")}}getOrgIcon(){return{type:0,content:n.getImageUrl("ODSWG.33803b19-f174-4bd0-9573-be3dd21178df")}}getPersonIcon(){return{type:0,content:n.getImageUrl("ODSWG.49df98b5-400a-49b7-9d2a-3507005d9262")}}getHistoryIcon(){return{type:0,content:n.getImageUrl("ODSWG.7db9948d-3ad6-4d40-8cb3-ae54b2cb00d7")}}getNewsIcon(){return{type:0,content:n.getImageUrl("ODSWG.f41dd3b1-c1b7-4d73-9122-488e4ac7fb82")}}getArrowTrendingIcon(){return{type:0,content:n.getImageUrl("ODSWG.2104b23b-a66c-4c36-99c6-27c375b4ed4e")}}getBackpackIcon(){return{type:0,content:n.getImageUrl("ODSWG.cdd81c7c-1ff0-4671-91cd-dbba44092548")}}getCaretRightIcon(){return{type:0,content:n.getImageUrl("ODSWG.7925a41d-eecf-4db2-9ec5-ac78ec395f03")}}getCaretLeftIcon(){return{type:0,content:n.getImageUrl("ODSWG.f36ba2b4-7e6a-4d2b-b6a9-914452f0c468")}}getAcronymsIcon(){return{type:0,content:n.getImageUrl("ODSWG.efba8ddd-de08-4ce7-94d8-01e0988d6896")}}getListBceIcon(){return{type:0,content:n.getImageUrl("ODSWG.a81f658a-ca12-43ef-85f8-d96428e48ab2")}}getChatBceIcon(){return{type:0,content:n.getImageUrl("ODSWG.35385236-9396-4c15-ae84-89f709dd0828")}}getEditBceIcon(){return{type:0,content:n.getImageUrl("ODSWG.e91947a4-e474-457f-baa7-ff2f6f5fe949")}}getComposeBcbIcon(){return{type:0,content:n.getImageUrl("ODSWG.e88a8266-e907-409c-8966-df2d6cbf412e")}}getDataUsageBcbIcon(){return{type:0,content:n.getImageUrl("ODSWG.0a7ad212-3e00-41c3-b840-47ad11c6ed91")}}getScalesBcbIcon(){return{type:0,content:n.getImageUrl("ODSWG.0cf6145f-728f-4026-9395-7678d5b0bdbe")}}getShieldIcon(){return{type:0,content:n.getImageUrl("ODSWG.5a7584f7-379d-49e6-84fe-0a5a9e450ae4")}}getPreviewIcon(){return{type:0,content:n.getImageUrl("ODSWG.2a51392d-1594-4dec-9d33-241cca4651be")}}getColorfulBookmarkIcon(){return{type:0,content:n.getImageUrl("ODSWG.00573644-4332-488d-ab0f-98c0e4d28d5a")}}getWorkIcon(){return{type:0,content:n.getImageUrl("ODSWG.a12ef35a-10f6-4fcf-810e-58495f6f13e1")}}getMsbQnaIcon(){return{type:0,content:n.getImageUrl("ODSWG.cae3d039-2287-471d-b89e-c27d0909c6c9")}}getAcronymIcon(){return{type:0,className:"msb-acronymIcon",content:n.getImageUrl("ODSWG.b4789ea5-21f1-4bb6-bf32-cf8bdd3103fa")}}}n.MsbIconUtils=t}(WSB||(WSB={})),function(n){class t extends Error{constructor(n,t,i){super(t===null||t===void 0?void 0:t.publicMessage);this.responseContext=n;this.errorMessage=t;this.innerError=i;this.isBrowserOnline=navigator.onLine}}n.MsbHttpError=t;const i=6e4,r="request-id",u="x-end2endlatencyms";class f{async sendHttpAsync(n){return this.validateRequest(n),this.validateTokenExpiry(n),await this.fetchWrapperAsync(n)}validateRequest(i){if(!i.url){const i=`[MsbHttpWrapper].sendHttpAsync failed with no url`;throw new t({statusCode:n.ClientErrorCode.UrlUnavailable},{publicMessage:i});}try{new URL(i.url)}catch(r){const u=`[MsbHttpWrapper].sendHttpAsync failed with ill-formed url`;throw new t({statusCode:n.ClientErrorCode.UrlUnavailable},{publicMessage:u,privateMessage:i.url},r);}if(!(i===null||i===void 0?void 0:i.token)&&!i.skipToken){const i=`[MsbHttpWrapper].sendHttpAsync failed with no token.`;throw new t({statusCode:n.ClientErrorCode.NoToken},{publicMessage:i});}}async fetchWrapperAsync(n){const r=this.buildFetchParameters(n),t=await this.callFetchApiAsync(r),{responseContext:i}=t;this.checkServerTime(n,i,"fetchWrapperAsync");const u=n.skipParseResultJson?t.responseText:await this.parseApiCallResultAsync(t,"fetchWrapperAsync");return{responseContext:i,result:u}}buildFetchParameters(i){try{const{method:r,url:f,token:e,skipToken:o,noCredentials:s,body:h,headers:u,ignoreDefaultHeaders:c}=i,t=new Headers;if(!c){o||t.append("Authorization",`Bearer ${e}`);t.append("Content-Type","application/json");const i=n.Host.getLanguage();t.append("X-Search-TrafficType","WsbClient");t.append("X-MSEdge-UILang",i);t.append("X-FD-UILang",i);t.append("X-Client-Language",i);t.append("User-Agent",n.getUserAgent())}for(const n in u)t.append(n,u[n]);const l=r=="GET"?undefined:h||"";return{url:f,method:r,body:l,headers:t,noCredentials:s}}catch(r){throw new t({statusCode:n.ClientErrorCode.MsbHttpBuildApiParameterError},{publicMessage:`[MsbHttpWrapper].buildFetchParameters failed`},r);}}async callFetchApiAsync(i){const{url:v,method:y,body:p,headers:w,noCredentials:b}=i;let s,h,c,r,u,f,e;try{if(s=performance.now(),h=n.getCurrentDate(),c=n.getCurrentTime(),(n.TestHookUrlParameters===null||n.TestHookUrlParameters===void 0?void 0:n.TestHookUrlParameters.msbHttpFail)==="at-call")throw new Error("mocked failed error at call");const t=b?undefined:"include";e=await fetch(v,{method:y,body:p,headers:w,credentials:t});r=performance.now();u=n.getCurrentDate();f=n.getCurrentTime()}catch(a){return r=performance.now(),u=n.getCurrentDate(),f=n.getCurrentTime(),Promise.reject(new t({statusCode:n.ClientErrorCode.FetchError,perfStart:s,perfEnd:r,startDateTime:h,endDateTime:u,requestSentTime:c,responseReceivedTime:f},{publicMessage:`[MsbHttpWrapper].callFetchApiAsync failed when calling API`},a))}const l=this.createResponseContext(e.headers,e.status,c,f,s,r,h,u);let o;try{if((n.TestHookUrlParameters===null||n.TestHookUrlParameters===void 0?void 0:n.TestHookUrlParameters.msbHttpFail)==="at-read")throw new Error("mocked failed error at read");o=await e.text();l.responseText=o}catch(a){return Promise.reject(new t(l,{publicMessage:`[MsbHttpWrapper].callFetchApiAsync failed when reading response`,privateMessage:o},a))}return{responseContext:l,responseText:o}}createResponseContext(n,t,i,r,u,f,e,o){const{serverTraceId:s,serverLatency:h,serverTime:c}=this.getServerInfoFromHeader(n)||{};return{statusCode:t,serverTraceId:s,serverLatency:h,perfStart:u,perfEnd:f,startDateTime:e,endDateTime:o,requestSentTime:i,responseReceivedTime:r,serverTime:c}}async parseApiCallResultAsync(n,i){const{responseContext:u,responseText:r}=n;if(u.statusCode==200)try{return JSON.parse(r)}catch(f){const e=r==="";let n="";return f instanceof SyntaxError&&(n=`, syntaxError=${f.message}`),Promise.reject(new t(u,{publicMessage:`[MsbHttpWrapper].parseApiCallResultAsync(${i}) failed, emptyResponse=${e}`+n,privateMessage:r},f))}else return Promise.reject(new t(u,{publicMessage:`[MsbHttpWrapper].parseApiCallResultAsync(${i}) failed non-HTTP200`,privateMessage:r}))}validateTokenExpiry(i){const r=i.tokenJwtExp;if(r){const u=n.getCurrentTime(),f=r-u;if(f<0){const e=i.tokenRefreshTime,o=u-(e||0);throw new t({statusCode:n.ClientErrorCode.MsbTokenExpiredBeforeRequest},{publicMessage:`{[MsbHttpWrapper].sendHttpAsync}, rt=${e}, jwtExp=${r}, now=${u}`});}}}checkServerTime(t,r,u){if(n.config.msbServerClientTimeSkewLimitMins&&t.checkServerTime){const{serverTime:f,requestSentTime:e,serverTraceId:o}=r;if(f&&e){const r=f-e,s=`[MsbHttpWrapper].${u} returned, ServerTime=${f}, ClientTime=${e}, diff=${r}, urlBase=${n.msbHost.urlUtils.getUrlBaseInfo(t.url)}`,h=`Target URL: ${t.url}`;if(Math.abs(r)>n.config.msbServerClientTimeSkewLimitMins*i){const t=n.msbHost.isMsbInternalTenant()?h:undefined;bfbWsbTel.logError("Wsb server and client time mismatch",s,{serverTraceId:o,additionalMessage:t})}}}}getServerInfoFromHeader(t){const i=t===null||t===void 0?void 0:t[r],f=t===null||t===void 0?void 0:t[u];if(i||f)return{serverTraceId:i,serverLatency:f};const e=n.getMsEdgeRef(t),{traceId:o,timestamp:s}=e||{};return{serverTraceId:o,serverTime:s}}}n.MsbHttpWrapper=f}(WSB||(WSB={})),function(n){const t="X-Client-Language",i="X-Client-LocalTime",r="Client-Request-Id",u="User-Agent",f="6ba82e35-cb33-52a3-710a-75b1290faba1.1000.01",e="https://substrate.office.com/search/api/v1/events?scenario=",o="SearchEntityActions";class s{logSearchEntityActions(s,h){var a,v,y,p,w,b;if(!n.msbHost.features.isWsbLoggerForDmaRegionDisabled()){const k=e+s,c=n.msbHost.getAadUserInfo(),g=[{Key:(a=window===null||window===void 0?void 0:window._G)===null||a===void 0?void 0:a.IG,Value:[{Name:o,Attributes:[{Key:"Id",Value:f},{Key:"LocalTime",Value:n.getDateWithTimezone()},{Key:"EventType",Value:"EntityClicked"},{Key:"UserId",Value:(v=c===null||c===void 0?void 0:c.userAadId)!==null&&v!==void 0?v:""},{Key:"TenantId",Value:(y=c===null||c===void 0?void 0:c.tenantId)!==null&&y!==void 0?y:""},{Key:"TraceId",Value:(p=window===null||window===void 0?void 0:window._G)===null||p===void 0?void 0:p.IG},{Key:"LogicalId",Value:h?h:(w=window===null||window===void 0?void 0:window._G)===null||w===void 0?void 0:w.IG},{Key:"Version",Value:"2"}]}]}],d=JSON.stringify(g),l={};if(l[r]=(b=window===null||window===void 0?void 0:window._G)===null||b===void 0?void 0:b.IG,l[t]=n.uiLanguageCache,l[i]=n.getDateWithTimezone(),l[u]=n.getUserAgent(),n.config.msbEnableAccountManager)this.postRequestAsync(k,l,d).catch(t=>{});else{const t={url:k,requestType:"POST",headers:l,body:d,useToken:"WSB3S"};n.msbHost.tokenManager.refresh3sTokenAndCall(()=>{n.Msb.sendAjax(t)})}}}async postRequestAsync(t,i,r){const{token:u}=await n.msbHost.accountManager.refresh3STokenAsync(),f={method:"POST",url:t,token:u,headers:i,body:r};await n.msbHost.httpWrapper.sendHttpAsync(f)}}n.MsbSubstrateLogger=s}(WSB||(WSB={})),function(n){const r="AadUserId",u="WsbVerifyAccountRequired",t="AadChatEligibility",f=3e5,e=6e4,o=6e4,s=50,h="http://localhost:5000/mocktoken";class i{constructor(n){this.codeLocation=n}}n.MsbNoMsbTokenError=i;class c{constructor(t){this.accessTokenManager=t;this.tokenChanged=!1;this.tokenChangedHandlers=[];this.aadNotAvailableHandlers=[];this.wsbAadReadyNotified=!1;this.accountTypeChangedIsFiring=!1;n.Host.bindAccountChanged(()=>{n.Host.clearWorkQuery(),this.clearMemoryCachedInfo()});t.bindAccountTypesChanged(()=>{this.handleAccountTypeChanged()});t.bindVerifyAccountRequired((n,t)=>{this.handleWsbVerifyAccountRequired(n,t)});t.bindAccessTokenAvailable((n,t)=>{this.handleWsbAccessTokenAvailable(n,t)});t.bindSelectedAccountChanged(()=>{this.handleWsbSelectedAccountChanged()});n.config.msbLoadQfScriptEarly&&n.safeSetTimeout(()=>{n.msbHost.shouldForceEnterprise()&&_w.postMessage({messageType:"BingAtWork:WsbQfScriptLoad"},_w.location.origin)},s,"MsbTokenManager Constructor");n.config.msbEnableChat&&this.loadChatEligibilityCache()}bindMsbAccountAvailableTenantSettingHandler(n){this.msbAccountAvailableTenantSettingHandler=n}bindAadNotAvailable(n){this.aadNotAvailableHandlers.push(n)}clearMemoryCachedInfo(){this.lokiAccount=undefined}bindTokenChanged(n){this.tokenChangedHandlers.push(n);const t=this.getMsbToken();t&&n(t)}refreshMsbTokenAndCall(t,i,r){let u;n.msbPerfLogger&&(typeof this.lastPerfMarkCallId=="undefined"&&(this.lastPerfMarkCallId=0),u=this.lastPerfMarkCallId++);const f=this.getMsbToken("refreshMsbTokenAndCall:1");!f||(n.TestHookUrlParameters===null||n.TestHookUrlParameters===void 0?void 0:n.TestHookUrlParameters.msbAlwaysAuthBaw)?this.callGetMsbAccount(!0,()=>{const r=this.getMsbToken("refreshMsbTokenAndCall:2");r?n.safeExecute(()=>t(r),"MsbTokenManager::refreshMsbTokenAndCall:callback - fetched token"):i&&n.safeExecute(i,"MsbTokenManager::refreshMsbTokenAndCall:noTokenCallback")},`${r}:refreshMsbTokenAndCall`,u):n.safeExecute(()=>t(f),"MsbTokenManager::refreshMsbTokenAndCall:callback - cached token")}async refreshMsbTokenAsync(){const n="MsbTokenManager::refreshMsbTokenAsync";return new Promise((t,r)=>{this.refreshMsbTokenAndCall(n=>{var i,r;const u=(i=BingAtWork===null||BingAtWork===void 0?void 0:BingAtWork.wsb)===null||i===void 0?void 0:i.wsbAccessTokenJwtExp,f=(r=BingAtWork===null||BingAtWork===void 0?void 0:BingAtWork.wsb)===null||r===void 0?void 0:r.wsbAccessTokenRefreshTime;return t({token:n,tokenJwtExp:u,tokenRefreshTime:f})},()=>r(new i(n)),n)})}refresh3sTokenAndCall(t,i){const r=this.get3sToken();r?n.safeExecute(()=>t(r),"MsbTokenManager::refresh3sTokenAndCall:callback - cached token"):this.refreshMsbTokenAndCall(()=>{this.callFetch3sAccount(()=>{this.after3sAccountRefreshed(t,i)})},()=>{i&&n.safeExecute(()=>i(),"MsbTokenManager::refresh3sTokenAndCall:noTokenCallback")},"Refresh3sTokenAndCall")}isAadAvailable(){return this.accessTokenManager.isAadAvailable()}getSelectedAccountId(){return this.accessTokenManager.getSelectedAccountId()}after3sAccountRefreshed(t,i){const r=this.get3sToken();r?n.safeExecute(()=>t(r),"MsbTokenManager::refresh3sTokenAndCall:callback - fetched token"):i&&n.safeExecute(i,"MsbTokenManager::refresh3sTokenAndCall:noTokenCallback")}getMsbToken(t){if(!this.msbAccount)return undefined;const i=n.getCurrentTime(),r=i>this.msbAccount.ExpireDateTime;if((n.TestHookUrlParameters===null||n.TestHookUrlParameters===void 0?void 0:n.TestHookUrlParameters.msbAuthFailed)||r){if(BingAtWork.wsb&&(BingAtWork.wsb.wsbAccessToken=undefined,BingAtWork.wsb.wsbAccessTokenWamExp=undefined,BingAtWork.wsb.wsbAccessTokenJwtExp=undefined),n.isMsftAccountConnected&&r&&t){const n=`Token expired by ${(i-this.msbAccount.ExpireDateTime)/e} mins and caller: ${t}`;bfbWsbTel===null||bfbWsbTel===void 0?void 0:bfbWsbTel.logError("MsbTokenExpired",n)}return this.msbAccount=undefined,undefined}return this.msbAccount.Token}get3sToken(){if(!this.substrateAccount)return undefined;const t=n.getCurrentTime();return t>this.substrateAccount.ExpireDateTime?(this.substrateAccount=undefined,BingAtWork.wsb&&(BingAtWork.wsb.wsb3sAccessToken=undefined),undefined):this.substrateAccount.Token}getMsbAccountRoutingHint(){var n;if((n=this.msbAccount)!==null&&n!==void 0)return n.RoutingHint}getLoki                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                .parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(
        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
        function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            } else {
                getParsingFlags(config).invalidEra = input;
            }
        }
    );

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return lo function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays =
            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
              ? weekdays[m.day()]
              : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
              ? this._weekdaysShort[m.day()]
              : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
              ? this._weekdaysMin[m.day()]
              : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        var day = get(this, 'Day');
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2, match1to2HasZero);
    addRegexToken('h', match1to2, match1to2NoLeadingZero);
    addRegexToken('k', match1to2, match1to2NoLeadingZero);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            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","names":["createSelector"]}